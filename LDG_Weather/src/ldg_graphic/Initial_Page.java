/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ldg_graphic;

import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.http.HttpResponse;
import org.apache.http.client.fluent.Request;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.util.EntityUtils;
import org.dom4j.io.OutputFormat;

/**
 *
 * @author 70657788
 */
public class Initial_Page extends javax.swing.JFrame {

    Gson g;
    //FileReader f;
    BufferedReader file;

    /**
     * Creates new form Initial_Page
     */
    public Initial_Page() throws FileNotFoundException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Name_project = new javax.swing.JLabel();
        Search = new javax.swing.JButton();
        City = new javax.swing.JTextField();
        Position = new javax.swing.JButton();
        Name = new javax.swing.JLabel();
        gif = new javax.swing.JLabel();
        HPA = new javax.swing.JLabel();
        Temperature = new javax.swing.JLabel();
        CLOUD = new javax.swing.JLabel();
        WIND = new javax.swing.JLabel();
        Lon = new javax.swing.JLabel();
        Lat = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Name_project.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Name_project.setText("Weather Map");

        Search.setText("Search");
        Search.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Search.setBorderPainted(false);
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Position.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ldg_graphic/posizione.jpg"))); // NOI18N
        Position.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PositionActionPerformed(evt);
            }
        });

        Name.setBackground(new java.awt.Color(255, 255, 255));
        Name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        HPA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HPA.setText("Pressure:");

        Temperature.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        CLOUD.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CLOUD.setText("Cloud:");

        WIND.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        WIND.setText("Wind: ");

        Lon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lon.setText("Lon: ");

        Lat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Lat.setText("Lat: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Name_project, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CLOUD, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HPA, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(WIND, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(gif, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(Temperature, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Position, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(City, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(Lon, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Lat, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Name_project)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(City, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Position, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Lon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Lat, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addComponent(gif, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(Temperature, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                .addComponent(CLOUD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(WIND, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(HPA, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PositionActionPerformed

    }//GEN-LAST:event_PositionActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        FileReader f = null;
        try {
            f = new FileReader("prova.xml");
            file = new BufferedReader(f);
            String name = City.getText();
            Name.setText(name);
            try {
                createXML();
            } catch (IOException ex) {
                Logger.getLogger(Initial_Page.class.getName()).log(Level.SEVERE, null, ex);
            } catch (URISyntaxException ex) {
                Logger.getLogger(Initial_Page.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                setValue();
            } catch (IOException ex) {
                Logger.getLogger(Initial_Page.class.getName()).log(Level.SEVERE, null, ex);
            }
            City.setText("");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Initial_Page.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                f.close();
            } catch (IOException ex) {
                Logger.getLogger(Initial_Page.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void createXML() throws IOException, URISyntaxException {
        g = new Gson();
        PrintStream f = new PrintStream("prova.xml");
        URIBuilder builder = new URIBuilder().setScheme("http")
                .setHost("api.openweathermap.org")
                .setPath("data/2.5/weather")
                .addParameter("q", City.getText())
                .addParameter("mode", "xml")
                .addParameter("appid", "d400fec814c6d1b2403716b155b31e84");

        System.out.println(builder.build());

        HttpResponse response = Request.Get(builder.build())
                .execute().returnResponse();

        int returnCode = response.getStatusLine().getStatusCode();
        String body = EntityUtils.toString(response.getEntity());

        System.out.println(body);
        while (true) {
            for (int j = 0; j < body.length(); j++) {
                if (body.charAt(j) == '>') {
                    f.println(body.charAt(j));
                } else {
                    f.print(body.charAt(j));
                }
            }
            f.close();
            break;
        }

    }

    private void setValue() throws IOException {
        String s = file.readLine();
        //s = file.readLine();
        while (s != null) {
            if (s.length() > 5){
                if(s.substring(1, 5).equals("wind")){
                    s = file.readLine();
                    WIND.setText("Wind: "+getSpeed(s));
                    s=file.readLine();
                    s=file.readLine();
                    s=file.readLine();
                    s=file.readLine();
                    WIND.setText(WIND.getText()+" "+getDirection(s));
                }
            }
            if (s.length() > 6) {
                if (s.substring(1, 6).equals("coord")) {
                    Lon.setText("Lon: " + s.substring(12, 17));
                    Lat.setText("Lat: " + s.substring(24, 29));
                }
                if (s.length() > 7){
                    if (s.substring(1, 7).equals("clouds")) {
                        CLOUD.setText("Clouds: "+getClouds(s));
                    }
                }
                if (s.length() > 9) {
                    if (s.substring(1, 9).equals("pressure")) {
                        HPA.setText("Pressure: "+getPressure(s));
                    }
                }
                if (s.length() > 12) {
                    if (s.substring(1, 12).equals("temperature")) {
                        Temperature.setText(getCelsius(s.substring(20, 26)));
                    }
                }
            }else{
                
            }
            s = file.readLine();
        }
    }

    private String getCelsius(String kelvin) {
        if(kelvin.charAt(5)=='"'){
            kelvin=kelvin.substring(0,5);
        }
        double kel = Double.valueOf(kelvin);
        double cel = kel - 273.15;
        String celsius = String.valueOf(cel);
        if(celsius.length()>4){
            return celsius.substring(0,4);
        }
        return celsius;
    }

    private String getPressure(String row) {
        if (row.substring(17, 21).charAt(3)=='"') {
            return row.substring(17,20)+" "+row.substring(28,31);
        }else{
            return row.substring(17,21)+" "+row.substring(29,32);
        }
    }

    private String getSpeed(String row){
        if(row.substring(14,17).charAt(2)==' '){
            return row.substring(14,15);
        }else{
            return row.substring(14,17);
        }
    }
    
    private String getClouds(String row){
        String s="";
        for(int i=23; i<row.length(); i++){
            if(row.charAt(i)!='"' && row.charAt(i)!='/' && row.charAt(i)!='>' && row.charAt(i)!='='){
                s=s+row.charAt(i);
            }
        }
        return s;
    }
    
    private String getDirection(String row){
        if(row.substring(18,21).charAt(2)==' '){
            if(row.substring(27, 30).charAt(2)==' '){
                return row.substring(27, 28);
            }else{
                if(row.substring(27, 30).charAt(2)=='"'){
                    return row.substring(27, 29);
                }else{
                    return row.substring(27, 30);
                }
            }
        }else{
            if(row.substring(18,21).charAt(2)=='"'){
                if(row.substring(28, 31).charAt(2)==' '){
                    return row.substring(28, 29);
                }else{
                    if(row.substring(28, 31).charAt(2)=='"'){
                        return row.substring(28, 30);
                    }else{
                        return row.substring(28, 31);
                    }
                }
            }else{
                if(row.substring(29, 32).charAt(2)==' '){
                    return row.substring(29, 30);
                }else{
                    if(row.substring(29, 32).charAt(2)=='"'){
                        return row.substring(29, 31);
                    }else{
                        return row.substring(29, 32);
                    }
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Initial_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Initial_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Initial_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Initial_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Initial_Page().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Initial_Page.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CLOUD;
    private javax.swing.JTextField City;
    private javax.swing.JLabel HPA;
    private javax.swing.JLabel Lat;
    private javax.swing.JLabel Lon;
    private javax.swing.JLabel Name;
    private javax.swing.JLabel Name_project;
    private javax.swing.JButton Position;
    private javax.swing.JButton Search;
    private javax.swing.JLabel Temperature;
    private javax.swing.JLabel WIND;
    private javax.swing.JLabel gif;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
